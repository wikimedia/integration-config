# Contains any jobs related to the beta cluster.
#
# Beta is a cluster meant to reproduce the production environnement out of
# virtual instances in the Wikimedia labs.  We use Jenkins job to maintain
# some recurring tasks such as running the MediaWiki database schema updates.
#
# Jobs should be prefixed with 'beta-' and tied to the deployment-deploy*
# host defined in Jenkins.  They will run as the `jenkins-deploy` user on that
# instance.  To create a new job simply use the provided default which would
# take care of the basic configuration.
#
# Example:
#
#  - job:
#    name: beta-myawesomeness
#    defaults: beta
#    <your stuff there>

# Basic valid defaults, making sure we run on the deployment-deploy* host
# slave nodes which is in labs.
- defaults:
    name: beta
    description: |
      <p>Job is managed by <a href="https://www.mediawiki.org/wiki/CI/JJB">Jenkins Job Builder</a>.</p>
    project-type: freestyle

    wrappers:
      - timeout:
          timeout: 30
      - timestamps
      - credentials-binding:
          - text:
              credential-id: composer-github-oauthtoken
              variable: COMPOSER_GITHUB_OAUTHTOKEN

# FIXME: unify with debian-glue
# this job is designed to handle our special little scap corner-cases
# that have accumulated after a few years of development on
# differential. Ideally could combine this job with the
# debian-glue job and somehow manage to trigger the beta publish job.
- job:
    name: beta-build-scap-deb
    defaults: beta
    description: |
      <p>Clones the mediawiki/tools/scap repo, and checks out to the
      supplied ZUUL_REF commit.  Then builds a scap deb package.  The
      package version will be something like 4.0.2-1~20211022163629.70.
      The deb is available as a job artifact.</p>

      <p>Triggered by: merges into the mediawiki/tools/scap repo</p>
      <p>Triggers: beta-publish-deb</p>
    properties:
      - copyartifact:
          projects: beta-publish-deb
    node: DebianGlue
    triggers:
        - zuul
    builders:
      - shell: |
          set -x
          env
          rm -rf src source

          git clone https://gerrit.wikimedia.org/r/"$ZUUL_PROJECT" source
          cd source
          
          git fetch "$ZUUL_URL"/"$ZUUL_PROJECT" "+$ZUUL_REF:$ZUUL_REF"
          git -c advice.detachedHead=false checkout FETCH_HEAD

          NAME="$(dpkg-parsechangelog --show-field source)"
          VERSION="$(dpkg-parsechangelog --show-field version)"

          echo 'auto-commit' >> debian/source/options
          echo "${NAME} source: format-3.0-but-debian-changes-patch" >> debian/source.lintian-overrides

          git add .
          git commit --amend --no-edit

          export GIT_COMMIT=$(git rev-parse HEAD)
          export GIT_BRANCH=$GIT_COMMIT
          export SKIP_QUILT_CLEANUP=true
          export DBP_EXTRA_OPTS=--source-option=--auto-commit
          export DEBEMAIL="jenkins-bot@wikimedia.org" # to avoid lintian bogus-mail-host errors

          cd "$WORKSPACE"
          /usr/bin/generate-git-snapshot

          export distribution=stretch
          export REPOSITORY=/srv/packages
          export REPOS=jenkins-debian-glue
          export SKIP_REMOVE=true
          export BUILD_ONLY=yes

          /usr/bin/build-and-provide-package

          # We might consider adding --warnings
          set -o pipefail
          # Source package:
          lintian-junit-report --filename lintian-binary.txt *.dsc | tee lintian-binary.xml

          # Binary package:
          lintian-junit-report --filename lintian-source.txt *.changes | tee lintian-source.xml

          set +o pipefail

          # Exposed as a build artifact
          echo "$ZUUL_COMMIT" > HEAD

          # Expose the package version as a build artifact
          echo *.dsc | sed -E -e 's/^scap_(.*)\.dsc$/\1/' > VERSION

          exit 0
    publishers:
      # T295719: Temporarily disabled
      # - xunit:
      #     thresholdsmode: 'number'
      #     thresholds:
      #         - failed:
      #             failure: 0
      #     types:
      #         - junit:
      #             pattern: 'lintian-*.xml'
      - archive:
          artifacts: 'HEAD,VERSION,*.gz,*.bz2,*.xz,*.deb,*.dsc,*.buildinfo,*.changes,debc.txt,lintian*.txt,lintian*.xml'
      - postbuildscript:
          builders:
            - build-on:
                - SUCCESS
              build-steps:
                  - trigger-builds:
                      - project: beta-publish-deb
                        predefined-parameters: 'COPY_FROM=${JOB_NAME}'
                        block: true

- job:
    name: beta-publish-deb
    defaults: beta
    description: |
      Publishes a scap deb (from an upstream build) into the aptly repo(s) on deployment-deploy01.
    node: BetaClusterBastion
    builders:
      - copyartifact:
          project: '$COPY_FROM'
          which-build: upstream-build
          filter: '*.deb, HEAD, VERSION'
          target: /srv/deployment/debs
      - shell: |
          mv /srv/deployment/debs/{HEAD,VERSION} "$WORKSPACE"
          aptly repo -remove-files=false -force-replace=true add stretch-deployment-prep /srv/deployment/debs/
          aptly repo -remove-files=true -force-replace=true add buster-deployment-prep /srv/deployment/debs/
          aptly publish --skip-signing update stretch-deployment-prep
          aptly publish --skip-signing update buster-deployment-prep
    publishers:
      - archive:
          artifacts: 'HEAD,VERSION'

# Job to run MediaWiki update.php script on all the beta wikis.
#
# Set TMPDIR to point to the tmpfs if it exists.
- job-template:
    name: beta-update-databases-eqiad
    defaults: beta
    node: BetaClusterBastion

    builders:
      - shell: |
          # Setup tmpfs directory
          export TMPDIR_FS="/srv/home/jenkins-deploy/tmpfs/jenkins-${{EXECUTOR_NUMBER}}"
          if [ -d "/srv/home/jenkins-deploy/tmpfs" ]; then
            mkdir -p "$TMPDIR_FS"
            chmod 777 "$TMPDIR_FS"
            export TMPDIR="$TMPDIR_FS"
          fi
          # Teardown tmpfs directory
          function global_teardown() {{
              rm -rf "$TMPDIR_FS"
          }}
          trap global_teardown EXIT

          /usr/local/bin/wmf-beta-update-databases.py

    publishers:
      - beta-irc

    wrappers:
      - timestamps
      - timeout:
          timeout: 45
      - credentials-binding:
          - text:
              credential-id: composer-github-oauthtoken
              variable: COMPOSER_GITHUB_OAUTHTOKEN

    # We do not have a good way to detect databases modifications, so just spam
    # the beta cluster with update requests.
    triggers:
     - timed: '@hourly'

    properties:
     - build-discarder:
         days-to-keep: 15

# Job to deploy the Wikimedia MediaWiki configuration files
#
# The configuration files are hosted in operations/mediawiki-config.git which
# is deployed manually on the production cluster.  On beta, we cant really keep
# up with all the changes, so we deploy them on sight.
#
# We simply update the repository on the beta host and do a git reset hard.
#
- job-template:
    name: beta-mediawiki-config-update-eqiad
    defaults: beta
    description: |
      Updates the operations/mediawiki-config.git checkout in
      /srv/mediawiki-staging on deployment-deploy01.  This job is triggered
      after a commit is merged into operations/mediawiki-config.
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    triggers:
     - zuul

    builders:
     # xref: operations/puppet/modules/beta/files/wmf-beta-mwconfig-update
     - shell: /usr/local/bin/wmf-beta-mwconfig-update

    properties:
     - build-discarder:
         days-to-keep: 15

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: true
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-sync-world

# Job updating MediaWiki core+extensions code and refreshing the message
#
# This is the poor man auto updating script. We should probably split the
# script in different part and have the jobs trigger each other.
- job-template:
    name: beta-code-update-eqiad
    defaults: beta
    description: |
      This job runs automatically every ten minutes and updates
      mediawiki core, extensions, skins, etc from master in
      /srv/mediawiki-staging/php-master on deployment-deploy01.  Then
      it triggers the beta-scap-sync-world job to cause "scap sync-world" to
      run.
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    properties:
     - build-discarder:
         days-to-keep: 7

    triggers:
     # Every ten minutes:
     - timed: 'H/10 * * * *'

    builders:
      # xref: operations/puppet/modules/beta/templates/wmf-beta-autoupdate.py.erb
      - shell: |
          /usr/local/bin/wmf-beta-autoupdate.py --verbose

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: false
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-sync-world

- job-template:
    name: beta-scap-sync-world
    defaults: beta
    description: |
      Runs "/usr/bin/scap sync-world" as jenkins-deploy on deployment-deploy01
    node: BetaClusterBastion

    # Do not run concurrently with upstream jobs
    block-upstream: true

    builders:
      - shell: |
          LOCKFILE="/var/lock/scap.operations_mediawiki-config.lock"
          if [ -O "$LOCKFILE" ]; then
            rm "$LOCKFILE"
          fi

          # scap/sh closes blindly close all potentially available file
          # descriptors. With one million of them, that slow down each command
          # execution by 240 ms. T204762
          ulimit -n 512

          # For the record
          /usr/bin/scap version

          # Scap 3.15.0 renames "scap sync" to "scap sync-world".
          /usr/bin/scap sync-world "$JOB_NAME (build $BUILD_DISPLAY_NAME)"

    properties:
     - build-discarder:
         days-to-keep: 7

    wrappers:
      - timestamps
      - timeout:
          timeout: 60
      - credentials-binding:
          - text:
              credential-id: composer-github-oauthtoken
              variable: COMPOSER_GITHUB_OAUTHTOKEN

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          content-type: 'html'
          attach-build-log: false
          aborted: true
          failure: true
          fixed: true

# Also used in mediawiki-core-code-coverage
- publisher:
    name: beta-irc
    publishers:
      - ircbot:
          strategy: failure-and-fixed
          notify-start: false
          notify-committers: false
          notify-culprits: false
          notify-upstream: false
          notify-fixers: false
          message-type: summary
          matrix-notifier: only-parent
          channels:
              - name: '#wikimedia-releng'
                notify-only: true

- project:
    name: beta
    jobs:
     - beta-code-update-eqiad
     - beta-mediawiki-config-update-eqiad
     - beta-scap-sync-world
     - beta-update-databases-eqiad
     - beta-build-scap-deb
