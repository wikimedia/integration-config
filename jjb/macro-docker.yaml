# Stop and/or kill any containers still running for the build.
- publisher:
    name: docker-reap-containers
    publishers:
     - postbuildscript:
         builders:
          - build-on:
              - SUCCESS
              - UNSTABLE
              - FAILURE
              - ABORTED
            build-steps:
              - shell: |
                  set -euxo pipefail
                  docker ps -q \
                    --filter label=jenkins.job=$JOB_NAME \
                    --filter label=jenkins.build=$BUILD_NUMBER \
                    | xargs --no-run-if-empty docker stop

# Delete everything in $WORKSPACE.
# publisher for all Docker based jobs.
- publisher:
    name: docker-wipe-workspace
    publishers:
     # Run via Docker as root to have sufficient permission to delete files of
     # any owner within the workspace directory and use `find` which more
     # handily processes dotfiles. Then delete the workspace directory itself.
     - postbuildscript:
         builders:
          - build-on:
              - SUCCESS
              - UNSTABLE
              - FAILURE
              - ABORTED
            build-steps:
              - docker-run:
                 image: 'docker-registry.wikimedia.org/bookworm:latest'
                 volumes:
                     $WORKSPACE: /workspace
                 entrypoint: /usr/bin/find
                 options: >-
                   --user=root
                 args: >-
                   "/workspace" -mindepth 1 -delete
              - shell: |
                  echo "Listing potentially remaining files in workspace for T282893"
                  ls -laF --color=always
              - shell: |
                 set -u
                 rmdir "$WORKSPACE"

# Perform all cleanup operations for a Docker build. This should generally be
# used as the final publisher for all Docker based jobs.
- publisher:
    name: docker-cleanup
    publishers:
      - docker-reap-containers
      - docker-wipe-workspace

# Create a cache directory that will be
# mounted into a container with --volume
- builder:
    name: docker-cache-dir
    builders:
     - shell: |
        mkdir -m 2777 -p cache || (ls -laF --color=always && false)

# Create a log directory that will be
# mounted into a container with --volume
- builder:
    name: docker-log-dir
    builders:
     - docker-wipe-dir:
         dir: log

# Create a src directory that will be
# mounted into a container with --volume
- builder:
    name: docker-src-dir
    builders:
     - docker-wipe-dir:
         dir: src

# Delete content of a directory under $WORKSPACE as 'nobody'
- builder:
    name: docker-wipe-dir
    builders:
     - shell: |
         set -eux
         mkdir -m 2777 -p "{dir}" || (ls -laF --color=always && false)
     - docker-run:
        image: 'docker-registry.wikimedia.org/bookworm:latest'
        volumes:
            $WORKSPACE: /workspace
        entrypoint: /usr/bin/find
        options: >-
          --user=nobody
        args: >-
          "/workspace/{dir}" -mindepth 1 -delete

# Run a Docker container using `docker run`. This builder should be used
# wherever possible to ensure the proper common arguments that allow for
# correct signal passing and cleanup are passed.
#
# Parameters:
#
# [entrypoint] string to override the container entrypoint.
#
# [workdir] string working directory inside the container.
#
# [options] space separated strings of arguments to pass to `docker run`
#
# Example:
#
#   options: >-
#     --env=MEDIAWIKI_TEST=1
#
# [environment] a map of environment variables to set.
#
# When the value contains a space, it is single quoted. Otherwise it is passed
# as is.
#
# Example:
#
#   environment:
#       GIT_USERNAME: sonar
#       CODE_HEALTH: 1
#       GIT_AUTHOR_NAME: 'John Doe'
#
# [volumes] a map of bind mounts.
#
#  Key is the path on the host relative to the current workspace, a key
#  starting with '/' is an absolute path.  A key starting with '$' is expected
#  to be a variable that will expand to an absolute path at runtime.
#  Value is optional, when not set the key is reused. When set, the path in the
#  container.
#  Example:
#
#   volumes: { cache: }  => --volume "$PWD/cache:/cache"
#
#   volumes: { src: /bar }  => --volume "$PWD/src:/bar"
#
#   volumes: { /srv/git: /srv/git:ro }  => --volume "/srv/git:/srv/git:ro"
#
#   volumes: { $WORKSPACE: /workspace }  => --volume "$WORKSPACE:/workspace"
#
# [image] Docker image to run
#
# [args] Arguments passed to the container.
#
# Example:
#
#  args: '--print "hello world"'
#
- builder:
    name: docker-run
    builders:
     # The macro has lot of funky moves with whitespaces :-)
     - shell: !j2: |
        {% block xxx_dummy_block_to_keep_trailing_newline -%}
        #!/bin/bash
        set -euxo pipefail
        {% if volumes is defined -%}
        set +x
        {%   for host_path in volumes -%}
        {%     if host_path.startswith('/') or host_path.startswith('$') -%}
        {%       set host_dir = host_path -%}
        {%     else -%}
        {%       set host_dir = '$PWD/' + host_path -%}
        {%     endif -%}
        if [ ! -d "{{ host_dir }}" ]; then
          echo "T282893: Expected host directory {{ host_dir }} to exist but it does not."
          exit 1
        fi
        {%   endfor -%}
        set -x
        {% endif -%}
        exec docker run
          {%- if entrypoint is defined and entrypoint|length -%}
            {{ " --entrypoint=" + entrypoint }}
          {%- endif -%}
          {%- if workdir is defined and workdir|length -%}
            {{ " --workdir=" + workdir }}
          {%- endif -%}
          {%- if options is defined and options|length -%}
            {{ " " + options }}
          {%- endif -%}
          {%- if environment is defined and environment|length -%}
              {%- for name, value in environment.items() -%}
                  {{ " " }}-e {{ name + '=' }}
                  {%- if ' ' in value|string() -%}
                      {{ "'" + value|string() + "'" }}
                  {%- else -%}
                      {{ value|string() }}
                  {%- endif -%}
              {%- endfor -%}
          {%- endif -%}
          {%- if memory is defined and memory|length -%}
                {{ " " }}--memory {{ memory }}
          {%- endif -%}
          {%- if volumes is defined -%}
              {%- for host_path, container_path in volumes.items() -%}
                  {%- if host_path.startswith('/') or host_path.startswith('$') -%}
                  {%-   set base_dir = '' -%}
                  {%- else -%}
                  {%-   set base_dir = '$PWD/' -%}
                  {%- endif -%}
                  {{ " " }}--volume "{{ base_dir + host_path }}:{{ container_path or ("/" + host_path) }}"
              {%- endfor -%}
          {%- endif %} \
          --security-opt seccomp=unconfined \
          --init \
          --rm \
          --label "jenkins.job=$JOB_NAME" \
          --label "jenkins.build=$BUILD_NUMBER" \
          --env-file <(set +x; /usr/bin/env | egrep -v '^(HOME|SHELL|PATH|LOGNAME|MAIL)=') \
          '{{ image }}' {{ args | default }}
        # nothing else can be executed due to exec
        {% endblock %}

# Run a docker image with cache, log, and src directories
#
# Parameter:
#
# image: the Docker image to run (eg: releng/php)
# args (optional): arguments passed to `docker run`.
- builder:
    name: docker-run-with-log-cache-src
    builders:
     - shell: |
        #!/bin/bash -eu
        set -x
        chmod 2777 src
        mkdir -m 2777 -p cache log
     - docker-run:
        entrypoint: >-
          {obj:entrypoint|}
        workdir: >-
           {obj:workdir|}
        environment: >-
          {obj:environment|}
        options: >-
          {obj:options|}
        # FIXME the following works:
        #
        #   memory: '{memory|}'
        #
        # But we are using obj for consistency with other parameters. Maybe
        # that was a hack which is no more needed with recent jjb versions.
        memory: >-
            {obj:memory|}
        volumes:
            !j2-yaml: |
                src: '{srcdir|/src}'
                cache:
                log: '{logdir|/log}'
                # extras
                {% if volumes is defined %}
                {% for (k, v) in volumes.items() %}
                {{ k }}: {{ v }}
                {% endfor %}
                {% endif %}

        image: '{obj:image}'
        args: '{obj:args|}'

# Use a docker image to clone the repository into /src with explicit options.
#
# Parameters:
#
# submodules (bool): whether or not to update/initialize repo submodules
#
- builder:
    name: docker-ci-src-setup-simple
    builders:
     - shell: |
        #!/bin/bash -eu
        set -x
        mkdir -m 2777 -p "cache"
     - docker-run: !j2-yaml: >-
         options:
           {%- if submodules is defined and not submodules %}
           --env GIT_NO_SUBMODULES=yes
           {%- else %}
           ''
           {%- endif %}
         volumes:
             src:
             cache:
             /srv/git: /srv/git:ro
         image: docker-registry.wikimedia.org/releng/ci-src-setup-simple:0.7.0-s1

- builder:
    name: setup
    builders:
     - docker-castor-load
     - docker-log-dir
     - docker-src-dir
     - docker-ci-src-setup-simple

- publisher:
    name: teardown
    publishers:
     - castor-save-workspace-cache
     - docker-cleanup

- builder:
    name: docker-zuul-cloner
    builders:
     - docker-src-dir
     - docker-run:
        volumes:
            src:
            /srv/git: /srv/git:ro
        image: docker-registry.wikimedia.org/releng/zuul-cloner:0.3.0-s8
        args: >-
          --color --verbose
          --map /zuul-clonemap.yaml
          --workspace /src
          --cache-dir /srv/git
          https://gerrit.wikimedia.org/r/p
          {projects}
